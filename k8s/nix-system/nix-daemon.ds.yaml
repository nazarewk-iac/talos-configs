apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nix-daemon
  namespace: nix-system
  labels:
    k8s-app: nix-daemon
spec:
  selector:
    matchLabels:
      name: nix-daemon
  template:
    metadata:
      labels:
        name: nix-daemon
    spec:
      tolerations:
        # these tolerations are to have the daemonset runnable on control plane nodes
        # remove them if your control plane nodes should not run pods
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      initContainers:
        - name: nix-init
          image: docker.io/nixos/nix
          command: ["/usr/bin/env", "bash"]
          # TODO: persist gcroots and mount them into subdirectories per container? https://matrix.to/#/!RRerllqmbATpmbJgCn:nixos.org/$V0cbV0y8SdQ0SmZlopx4KrOvH2xH06febYwtY_QKND4?via=nixos.org&via=matrix.org&via=tchncs.de
          # TODO: look into less interference between Docker image's config and host
          # TODO: investigate whether sharing profiles makes sense? https://matrix.to/#/!RRerllqmbATpmbJgCn:nixos.org/$PLtTN_80xU6azGAh66O961wRW48T-F8BK-KajasIPWs?via=nixos.org&via=matrix.org&via=tchncs.de
          args:
            - '-c'
            - |-
              set -xeEuo pipefail
              # contains leftovers from the original container
              for dir in /host/nix/var/nix/{gcroots,profiles,temproots} ; do
                test -e "${dir}" || continue
                rm -r "${dir}"
              done
              cp -aT --update=older /nix /host/nix
          resources:
            limits:
              memory: 64Mi
            requests:
              cpu: 10m
              memory: 8Mi
          volumeMounts:
            - name: host-nix
              mountPath: /host/nix
      containers:
        - name: nix-daemon
          args:
            - '-c'
            - |-
              set -xeEuo pipefail
              nix daemon --force-trusted
          resources:
            limits:
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 128Mi
          image: docker.io/nixos/nix
          command: ["/usr/bin/env", "bash"]
          envFrom:
            - configMapRef:
                name: nix-daemon-env
            - secretRef:
                name: nix-daemon-env
          securityContext:
            privileged: true
          volumeMounts:
            - name: etc-nix
              mountPath: /etc/nix
            - name: host-nix
              mountPropagation: HostToContainer
              mountPath: /nix
        - &client
          name: nix-store-repair
          image: docker.io/nixos/nix
          command: ["/usr/bin/env", "bash"]
          args:
            - '-c'
            - |-
              set -xeEuo pipefail
              while nix-store --repair --verify --check-contents ; do
                sleep $(( 3 * 60 * 60 + RANDOM % (15 * 60) ))
              done
          resources:
            limits:
              memory: 512Mi
              cpu: 200m
          envFrom:
            - configMapRef:
                name: nix-client-env
            - secretRef:
                name: nix-client-env
          volumeMounts:
            - name: etc-nix
              mountPath: /etc/nix
            - name: host-nix
              subPath: store/
              mountPath: /nix/store
              readOnly: true
            - name: host-nix
              subPath: var/nix/daemon-socket/
              mountPath: /nix/var/nix/daemon-socket
        #- <<: *client
        #  name: nix-auto-gc
        #  args:
        #    - '-c'
        #    - |-
        #      set -xeEuo pipefail
        #      while nix-collect-garbage --delete-older-than 90d ; do
        #        sleep $(( 12 * 60 * 60 + RANDOM % (30 * 60) ))
        #      done


      terminationGracePeriodSeconds: 30
      volumes:
        - name: etc-nix
          projected:
            sources:
              - configMap:
                  name: nix-files
              - secret:
                  name: nix-files
        - name: host-nix
          hostPath:
            path: /var/lib/nix
