#!/usr/bin/env bash
set -eEuo pipefail
trap 'info "Error when executing $BASH_COMMAND at line $LINENO!" >&2' ERR
info() { test "${LOG_LEVEL:-20}" -ge 20 || echo "[$(date -Iseconds)]" "$@" >&2; }
debug() { test "${LOG_LEVEL:-20}" -ge 10 || echo "[$(date -Iseconds)]" "$@" >&2; }
debug "STARTING $*"
trap 'debug "FINISHED $*"' EXIT
test -n "${PRJ_ROOT:-}" || eval "$(cd "${BASH_SOURCE[0]%/*}" && direnv export bash)"
test -z "${DEBUG:-}" || set -x
script_name="${BASH_SOURCE[0]##*/}"

log() {
  # shellcheck disable=SC2059
  printf "${script_name}: ${1}\n" "${@:2}" >&2
}

handle_file() {
  local filename="$1"
  local relpath="${filename#"${PRJ_ROOT}/"}"
  local cachepath="${PRJ_CACHE_HOME}/talos/configs/${relpath}"
  mkdir -p "${cachepath%/*}"

  if test -x "${filename}"; then
    log "found executable: %s" "${filename}"
    if ! "${filename}" >"${cachepath}"; then
      log "ERROR: failed to handle ${filename}"
      return 1
    fi
  else
    log "found file: %s" "${filename}"
    cp "${filename}" "${cachepath}"
  fi
  log "writing to: %s" "${cachepath}"
  echo "${cachepath}"
}

find_configs() {
  find_files "${PRJ_ROOT}/src" yaml "$@"
}

find_files() {
  local base_dir="$1" extension="$2" filenames=() args=()
  shift 2

  for arg in "$@"; do
    if test "${#args[@]}" == 0 && test "x$arg" == "x--"; then
      args=("${filenames[@]}")
      filenames=()
    else
      filenames+=("$arg")
    fi
  done
  local base_find_args=(
    "${base_dir}"
    -maxdepth 2
    ! -type d
    ! -name '.*'
    "${args[@]}"
  )

  for filename in "${filenames[@]}"; do
    local abs="${base_dir}/${filename}"
    local find_args=(
      "${base_find_args[@]}"
      \(
      '(' ! -executable \( -path "${abs}" -o -path "${abs}.d/*.${extension}" \) ')'
      -o
      '(' -executable \( -path "${abs}.*" -o -path "${abs}.d/*.${extension}.*" \) ')'
      \)
    )
    find "${find_args[@]}" -print0
  done
}

main() {
  find_configs "$@" | while IFS= read -r -d '' filename; do
    handle_file "${filename}"
  done
}

main "$@"
