#!/usr/bin/env bash
set -eEuo pipefail
test -z "${DEBUG:-}" || set -x
test -n "${PRJ_ROOT:-}" || eval "$(cd "${BASH_SOURCE[0]%/*}" && direnv export bash)"
# initializes Talos configurations
script_name="${BASH_SOURCE[0]##*/}"

log() {
  # shellcheck disable=SC2059
  printf "${script_name}: ${1}\n" "${@:2}" >&2
}

gen_config() {
  talosctl gen config "${config_args[@]}" "$@"
}

gen_node() {
  local name="$1" type args=("${config_args[@]}") node_json
  export name
  node_json="$(talos-cfg -cr '.nodes[env.name]')"
  type="$(jq -r '.type' <<<"${node_json}")"
  mapfile -t -O "${#args[@]}" args < <(
    talos-gen-configs -- "node-${name}.yaml" | sed 's/^/--config-patch=@/g'
  )
  args+=(--output="${cache}/node-$name.yaml")
  args+=(--output-types="$type")
  args+=(--additional-sans="$(jq -r '
    [
      .lan.dns,
      .links[.lan.link].ipv4,
      .links[.lan.link].ipv6,
      env.name, # this seems to already be part of certificates
      "::", #apiserver
      "::1" # TODO: controller-manager, scheduler ?
    ]
    | map(select(. != null and length > 0))
    | unique # it also sorts
    | join(",")
  ' <<<"${node_json}")")

  talosctl gen config "${args[@]}"
}

maybe_redirect() {
  if test "${INFO:-"1"}" == 1; then
    cat >&2
  else
    cat >/dev/null
  fi
}

can_connect() {
  local addr="$1" port="$2"
  if nc -w 1 -z "${addr}" "${port}" &>/dev/null; then
    log "${addr}:${port} is listening"
  else
    local err=$?
    log "${addr}:${port} is not listening (code ${err})"
    return "${err}"
  fi
}

is_talos_node_up() {
  local addr="$1"
  can_connect "${addr}" 50000
  if talosctl --endpoints "${addr}" --nodes "${addr}" time >&2; then
    log "${addr} talos node is up"
  else
    local err=$?
    log "${addr} talos node is down (code ${err})"
    return "${err}"
  fi
}

main() {
  export _talos_init=0
  cd "${PRJ_ROOT}"
  cache="${PRJ_CACHE_HOME}/talos"

  secrets="$(talos-gen-configs -- secrets.yaml)"
  cluster_domain="$(talos-cfg -r '.cluster.domain')"
  cluster_vip="$(talos-cfg -r '.cluster.vip')"

  default_endpoint="${default_endpoint:-"$(talos-cfg -r ".nodes | to_entries[0].value | .links[.lan.link].ipv4")"}"

  endpoints=()
  controlplanes=()
  node_names=()
  running_nodes=()

  while read -r node_json; do
    log "discovering: ${node_json}"
    enabled="$(jq -r ".enable" <<<"${node_json}")"

    if test "${enabled}" != "true"; then
      log "DISABLED: ${node_json}"
      continue
    fi

    ip="$(jq -r ".links[.lan.link].ipv6" <<<"${node_json}")"
    dns="$(jq -r ".lan.dns" <<<"${node_json}")"
    name="$(jq -r ".name" <<<"${node_json}")"
    type="$(jq -r ".type" <<<"${node_json}")"
    # shellcheck disable=SC2034
    netbird="$name.nb.kdn.im"

    node_names+=("${name}")

    if false; then # just to make it easier to format further entries
      :
    # TODO: talos control port doesn't listen on netbird
    #elif is_talos_node_up "${netbird}"; then
    #  talos_up="netbird"
    elif is_talos_node_up "${name}"; then
      talos_up="name"
    elif is_talos_node_up "${dns}"; then
      talos_up="dns"
    elif is_talos_node_up "${ip}"; then
      talos_up="ip"
    else
      talos_up=""
    fi

    case "${talos_up}" in
    netbird | dns | name | ip)
      running_nodes+=("${!talos_up}")
      if test "${type}" == "controlplane"; then
        log "Running controlplane node at ${!talos_up}"
        controlplanes+=("${!talos_up}")
        endpoints+=("${!talos_up}")
      fi
      ;;
    esac
  done < <(talos-cfg-nodes -c .)
  test "${#endpoints[@]}" -gt 0 || endpoints=("${default_endpoint}")

  log "controlplanes:"
  log " - %s" "${controlplanes[@]}"
  log "node names:"
  log " - %s" "${node_names[@]}"
  log "endpoints:"
  log " - %s" "${endpoints[@]}"
  log "running nodes:"
  log " - %s" "${running_nodes[@]}"

  kubernetes_endpoint="https://${endpoints[0]}:6443"
  for ip in "${cluster_vip}" "${endpoints[@]}"; do
    if can_connect "${ip}" 6443 &>/dev/null; then
      if [[ ${ip} == *:* ]]; then
        # IPv6
        kubernetes_endpoint="https://[${ip}]:6443"
      else
        kubernetes_endpoint="https://${ip}:6443"
      fi
      break
    fi
  done
  log "kubernetes_endpoint: ${kubernetes_endpoint}"

  config_args=(
    "$(talos-cfg -r '.cluster.name')" "${kubernetes_endpoint}"
    --force --output="${cache}"
    --talos-version="v$(talos-cfg -r '.talos.version')"
    --kubernetes-version="v$(talos-cfg -r '.k8s.version')"
    --with-secrets="${secrets}"
    --dns-domain="${cluster_domain}"
  )
  mapfile -t -O "${#config_args[@]}" config_args < <(
    talos-gen-configs -- "controlplane.yaml" | sed 's/^/--config-patch-control-plane=@/g'
    talos-gen-configs -- "worker.yaml" | sed 's/^/--config-patch-worker=@/g'
    talos-gen-configs -- "all.yaml" | sed 's/^/--config-patch=@/g'
  )

  test -e "${secrets}" || talosctl gen secrets --output-file="${secrets}"
  gen_config --output="${TALOSCONFIG}" --output-types=talosconfig
  # see https://github.com/siderolabs/talos/blob/465b9a4e6ca9367326cb862b501f1146989b07d4/cmd/talosctl/cmd/mgmt/gen/config.go#L173-L174
  talosctl config endpoint "${endpoints[@]}"
  talosctl config node "${running_nodes[@]}"

  for node in "${node_names[@]}"; do
    gen_node "${node}"
  done

  if test -f "${KUBECONFIG}"; then
    log "Skipping KUBECONFIG, because it exists."
  else
    for node in "${running_nodes[@]}"; do
      if talosctl-node "${node}" kubeconfig --force; then
        break
      fi
    done
  fi
}

main "$@" |& maybe_redirect
